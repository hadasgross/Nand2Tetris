/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
	// Handle A or C instructions according to op code
	Not(in=instruction[15], out=Ainst);
	Or(a=Ainst, b=instruction[5], out=Aload);
    	Mux16(a=instruction[0..15], b=aluout, sel=instruction[15], out=Aregin);
	ARegister(in=Aregin, load=Aload, out=Aregout, out[0..14]=addressM);
	// Choose ARegister or M according to the 'a' bit in the instruction, and the instruction must be C.
	And(a=instruction[15], b=instruction[12], out=regsel);
	Mux16(a=Aregout, b=inM, sel=regsel, out=aluy);
	//Feed DRegister with the load given the instruction is C.
	And(a=instruction[15], b=instruction[4], out=Dload);
	DRegister(in=aluout, load=Dload, out=alux);
	
	ExtendAlu(x=alux, y=aluy, instruction=instruction[6..14], out=aluout, out=outM, zr=zr, ng=ng);
	
	// Write to memory?
	And(a=instruction[3], b=instruction[15], out=writesel);
	Mux(a=false, b=true, sel=writesel, out=writeM);
	// Parse jump bits
	DMux8Way(in=true, sel=instruction[0..2], a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
	// Handle conditional jumps
	Or(a=ng, b=zr, out=ngorzr);
	Not(in=ngorzr, out=pos);
	And(a=jgt, b=pos, out=jgtres);
	And(a=jeq, b=zr, out=jeqres);
	Not(in=ng, out=posorzr);
	And(a=jge, b=posorzr, out=jgeres);
	And(a=jlt, b=ng, out=jltres);
	Not(in=zr, out=notzr);
	And(a=jne, b=notzr, out=jneres);
	And(a=jle, b=ngorzr, out=jleres);
	// Jump if that was a C instruction with at least 1 jump bit turned on.
	Or8Way(in[0]=jmp, in[1]=jgtres, in[2]=jeqres, in[3]=jgeres, in[4]=jltres, in[5]=jneres, in[6]=jleres, in[7]=false, out=jmpload);
	And(a=jmpload, b=instruction[15], out=pcload);
	Not(in=pcload, out=pcinc);
	PC(in=Aregout, load=pcload, inc=pcinc, reset=reset, out[0..14]=pc);
}

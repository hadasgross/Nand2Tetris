//	The chip will multiply 2 numbers.

CHIP Mul{


    IN a[16], b[16];

    OUT out[16];

  
 
 PARTS:
	// The only possibile digit mult results are either only zeroes
	// or the input 'a' shifted 1 to 15 times

	ShiftLeft(in=a, out=a1);
	ShiftLeft(in=a1, out=a2);
	ShiftLeft(in=a2, out=a3);
	ShiftLeft(in=a3, out=a4);
	ShiftLeft(in=a4, out=a5);
	ShiftLeft(in=a5, out=a6);
	ShiftLeft(in=a6, out=a7);
	ShiftLeft(in=a7, out=a8);
	ShiftLeft(in=a8, out=a9);
	ShiftLeft(in=a9, out=a10);
	ShiftLeft(in=a10, out=a11);
	ShiftLeft(in=a11, out=a12);
	ShiftLeft(in=a12, out=a13);
	ShiftLeft(in=a13, out=a14);
	ShiftLeft(in=a14, out=a15);
	
	// Choose between the two possibilities described above

	Mux16(a=false, b=a, sel=b[0], out=toaddzero);
	Mux16(a=false, b=a1, sel=b[1], out=toaddone);
	Mux16(a=false, b=a2, sel=b[2], out=toaddtwo);
	Mux16(a=false, b=a3, sel=b[3], out=toaddthree);
	Mux16(a=false, b=a4, sel=b[4], out=toaddfour);
	Mux16(a=false, b=a5, sel=b[5], out=toaddfive);
	Mux16(a=false, b=a6, sel=b[6], out=toaddsix);
	Mux16(a=false, b=a7, sel=b[7], out=toaddseven);
	Mux16(a=false, b=a8, sel=b[8], out=toaddeight);
	Mux16(a=false, b=a9, sel=b[9], out=toaddnine);
	Mux16(a=false, b=a10, sel=b[10], out=toaddten);
	Mux16(a=false, b=a11, sel=b[11], out=toaddeleven);
	Mux16(a=false, b=a12, sel=b[12], out=toaddtwelve);
	Mux16(a=false, b=a13, sel=b[13], out=toaddthirteen);
	Mux16(a=false, b=a14, sel=b[14], out=toaddfourteen);
	Mux16(a=false, b=a15, sel=b[15], out=toaddfifteen);
	
	//Add the results of the digit multiplication for the final output

	Add16(a=toaddzero, b=toaddone, out=tempone);
	Add16(a=toaddtwo, b=toaddthree, out=temptwo);
	Add16(a=toaddfour, b=toaddfive, out=tempthree);
	Add16(a=toaddsix, b=toaddseven, out=tempfour);
	Add16(a=toaddeight, b=toaddnine, out=tempfive);
	Add16(a=toaddten, b=toaddeleven, out=tempsix);
	Add16(a=toaddtwelve, b=toaddthirteen, out=tempseven);
	Add16(a=toaddfourteen, b=toaddfifteen, out=tempeight);
	Add16(a=tempone, b=temptwo, out=temponeone);
	Add16(a=tempthree, b=tempfour, out=temponetwo);
	Add16(a=tempfive, b=tempsix, out=temponethree);
	Add16(a=tempseven, b=tempeight, out=temponefour);
	Add16(a=temponeone, b=temponetwo, out=firstresult);
	Add16(a=temponethree, b=temponefour, out=secondresult);
	Add16(a=firstresult, b=secondresult, out=outtemp, out[0..7]=rightside,
	 out[8..15]=leftside);


	// Check the sign of the output according to the inputs

	Or8Way(in=rightside, out=isrightsidezero);
	Or8Way(in=leftside, in[7]=false, out=isleftsidezero);
	Or(a=isrightsidezero, b=isleftsidezero, out=isoutzero);

	// If the output is not zero we decide according to a[15], b[15]
	// otherwise out[15]=0
	Xor(a=a[15], b=b[15], out=neg);

	// If the output is non-negative it should have out[15]=0,
	// otherwise out[15]=1
	Mux(a=false, b=neg, sel=isoutzero ,out=isoutnegative);
	Mux16(a=false, b=outtemp, b[15]=isoutnegative, sel=true, out=out);
}